---
import preload from "./preload";

/**
 * Props of the Image component.
 */
export type Props = Omit<astroHTML.JSX.ImgHTMLAttributes, "src" | "name"> & {
    /**
     * Name of the image.
     *
     * This will be the name of the resulting file, so include it with extension if you want to access it later.
     * 
     * If not provided astro-preload will use the file's hash as the name.
     *
     * # Example
     *
     * ```
     * <Image name="cat.png" url="https://examplecat.com/cat.png" />
     * ```
     */
    name?: string;
    /**
     * Size of the Image in px. This is a shorthand for setting both the width and height props.
     * 
     * It is recommended to be set, as this will prevent layout shifts caused by loading in images.
     * 
     */
    size?: number
    /**
     * URL of the image.
     *
     * The image will be downloaded at build time and saved into `public/assets/preloaded/<name>`.
     *
     * If in `dev` mode, the image will not be saved.
     *
     * If the url is local (starts with '/') nothing will happen.
     *
     * # Example
     * ```
     * <Image name="cat.png" url="https://examplecat.com/cat.png" width={64} />
     * ```
     */
    url?: string;
    /**
     * Alias for url to mirror the img-Element; 
     * 
     * either src or url needs to be set. If both are set, url takes precedence
     */
    src?: string
};

const props = Astro.props;

const url = props.url ?? props.src

if(!url) {
    throw new Error("[astro-preload] Image marked for preloading is missing a source (add either a src or url prop)")
}


if(props.size) {
    props.width ??= props.size;
    props.height ??= props.height;
}

const result = await preload(url, {
    overrideName: props.name
})

props.src = result;
delete props.url;
delete props.size;

---

<img {...props} />
